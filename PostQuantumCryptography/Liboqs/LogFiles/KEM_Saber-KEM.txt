PQC key encapsulation mechanism (KEM) using
OpenQuantumSafe.org liboqs-java library
KEM algorithm: Saber-KEM

*** generate a key pair for client=receiver and server=sender ***
generated private key length: 2304
generated public key length:  992
private and public key for server and client saved to file

* * * generate the keyToEncrypt with the public key of the recipient * * *
length of the received clientPublicKey: 992
encryptedKey length: 1088 data: 321dae4a6bc37b28292b78d9fecc37b259d99ba3cf5e2479c038370c77031c44ad6a3689f4b438483b735977069a2c751f9362e3de16380ad52511bb5a6feda8554ee8e3eb7b824cc54144b23bbf0cad8a2c77868d64f6d60ee7988ec794540d8a719440a6ede71f29a40a9519c29ce86737681c4e0d5c1877f858c2a1577ffb2e69dd81d1a5c75eeef317a08f15028a770ecac14410474e4c7e5817622a64371c45932ee7ab0f4490c414992fa2a785d7ee6047fb7069cb3c07a3c300aa698a20181f48f47fa6cbbc28bee2acb3a8e772d8ca9fba1170ca4f808557459e43d48299c0bd56091f8d717517d8c242f100aa5b69f2b378bdb575556ae0079cab5517cd8179cf764db60e7c5de40cdde1f0db478eb4aec099fca86558924176f545db4ead33f021b311978b0ea75addd6989b11046dfaee5d7fa7e8f20eba5e8962e67d23419681d4db2dd79621dfe744b1036b26470367e6d827404bbdec1cc3adcc80e49f4ddcf267c0dfacf9b3015008e8a2c38d0af5c1d5eb24388360f4c9357f9ea2d7ef38803ba2fbb68463cb4a2497f4bb5cbb876bb4a0e0ed4ea7cc329e03f7c104171dcb2c8df6a8ee504cff24f0d3475b210f89d21b8aef2705868a4cf072c5f75e10bc34320563467f6dfe76b9b0d3c4dcc6f56bbf40566040d4a469ffbe879f2643d3cca037e37237e3b19ae6cdf511d67fa56b70f372ab78e2f88f044523541d2e20f03e3bc945f30819fea50f17d2dbae638cce657de2b08a9518babedb81400b0aeb015f0f938fa4a0633ee16fc2fc4b17f30d614348c31bd60d4c24fc5e430aa8f0340f45c0f352fd9914b31e0aab727bd9b22d0f527c8ae204b2adffcd366191bb1b3b39aae9982d526d5867423eea5b1bc25611e0676d047353ce670f957cfcbd44dd342a96810f29e82ee281e5ca22af57a7bffb69e562965c98c0add5da1a2c6c44728006c9d3bfe3e0ab1620e4ea415533c628fee612c9e1f639ff1315b07820704be746984e0dea589f01b6d35829865ada620d8ca7d3aee2e43569b5be241080f958a1e0eacb7f130574da602d6a7c3d6cfc1df8ea084e574574a2cc053b4b4f47b9639d51d5867ba16a6ec1a4911aded7f6a23e563ae9d12f27fb06e54b55192715f1e03b9d886ee74dafa66381e0ce9334b2821d2316a0b5a5a01dd64a4d42c88854106773556b65a74631bcc60e92d5213503eee79f807e34e39543089e2aa56ce4478baa74161aab60af8b73ab0101c959309950c7929befe0ff287dd35b3be6419918e98e72991987b7a2ffa57cdec0e2c3ada67a3e51f44155b703f34f95dec6483e27ffef004f87a10ac7eabec11cd04d1442e8889b235b94867143a5e695cd2c89a8080f3acdf7a5ddd7cd3cc5a212aaa6c2b50ad3d492db1ba0aa282c77d84693a4a22ac4618972c037d5c075ed0ec7cb3ec88b338c90da22a20f2652b592cbc72b9667eb5767da917673ff7ccf0b2732d9d4219f811704514f370799a6fc67df258f0e49f47baaae03a48dbce7999e9595
sharedSecretServer length: 32 data: 66d2013b8b0503aab03a70074dab58527d3f4060f26a6265ddbf5c034cf5286d

* * * decapsulate the keyToEncrypt with the private key of the recipient * * *
sharedSecretClient length: 32 data: 66d2013b8b0503aab03a70074dab58527d3f4060f26a6265ddbf5c034cf5286d

information from Liboqs about used algorithm:
KEM Details:
  Name: Saber-KEM
  Version: https://github.com/KULeuven-COSIC/SABER/tree/509cc5ec3a7e12a751ccdd2ef5bd6e54e00bd350 via https://github.com/jschanck/package-pqclean/tree/1ae84c3c/saber
  Claimed NIST level: 3
  Is IND-CCA: true
  Length public key (bytes): 992
  Length secret key (bytes): 2304
  Length ciphertext (bytes): 1088
  Length shared secret (bytes): 32
